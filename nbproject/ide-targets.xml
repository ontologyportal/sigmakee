<?xml version="1.0" encoding="UTF-8"?>
<project basedir=".." name="SigmaKEE-IDE">

    <!--
    ========
    TASKDEFs
    ========
    -->

    <import   file="../build.xml"/>
    <property file="nbproject/private/private.properties"/>
    <property file="nbproject/project.properties"/>
    <import   file="${catalina.base}/bin/catalina-tasks.xml"/>

    <path id="rcp">
        <path path="${run.classpath}"/>
    </path>
    <path id="dcp">
        <path path="${debug.classpath}"/>
    </path>
    <path id="tcp">
        <path path="${run.test.classpath}"/>
    </path>

    <!--
    ====
    INIT
    ====
    -->

    <target name="init" depends="init-ivy">
        <echo message="Welcome to the ${product.Name} v${product.Version}"/>
        <echo message="Specification Vendor:     ${spec.vendor}"/>
        <echo message=""/>
        <echo message="CATALINA_HOME is set to:  ${catalina.base}"/>
        <echo message="SIGMA_HOME    is set to:  ${sigma_home}"/>
        <echo message="SIGMA_SRC     is set to:  ${sigma_src}"/>
        <echo message="KBs_HOME      is set to:  ${kbs_home}"/>
        <echo message="Git dir       is set to:  ${ontologyportal.git}"/>
        <echo message="basedir       is set to:  ${basedir}"/>
        <echo message="classpath:                ${run.classpath}"/>
        <echo message="Java Version via Ant:     ${ant.java.version}"/>
        <echo message="Java Version System Prop: ${java.version}"/>

        <tstamp>
            <format property="TODAY_US" pattern="EEE, d MMM yyyy HHmm Z" locale="en,US"/>
        </tstamp>
    </target>
    <target name="TPTP" depends="SigmaKEE.TPTP">
        <!-- ${sigma.home} is queried in the main build
             which is defined in ~/.zshrc -->
        <echo message="SIGMA_HOME is set to: ${sigma_home}"/>
    </target>

    <!--
    =================
    RUN TASKS FOR SRC
    =================
    -->

    <target name="run" depends="clean,compile" description="Runs a main class with ${run.class} with ${run.args} set in build.properties">
        <java classname="${run.class}"
              classpathref="rcp"
              fork="true">
            <jvmarg line="${run.jvmargs}"/>
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <arg line="${run.args}"/>
        </java>
    </target>
    <target name="run-selected-file-in-java" depends="clean,compile">
        <fail unless="run.class">Must set property 'run.class'</fail>
        <java classname="${run.class}"
              classpathref="rcp"
              fork="true">
            <jvmarg line="${run.jvmargs}"/>
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${sigma_src}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <arg line="${run.args}"/>
        </java>
    </target>

    <!--
    ===================
    RUN TASKS FOR TESTS
    ===================
    -->

    <!-- Load top, MILO and ENG KBs for integration tests -->
    <target name="check.config" depends="get.length,copy.milo.config"/>
    <target name="get.length">
        <condition property="is.milo">
            <length mode="all" when="eq" length="2593"> <!-- Check the size every now and then for addtions of preferences -->
                <fileset file="${kbs.dir}/config.xml"/>
            </length>
        </condition>
        <echo message="confix.xml size is 2.543KB: ${is.milo}"/>
    </target>
    <target name="copy.milo.config" unless="is.milo">
        <antcall target="prep.top.mid.config"/>
    </target>

    <target name="test.unit" depends="clean,prep.unit.config,compile.test" description="Runs the UnitTestSuite">
        <junit printsummary="yes"
               showoutput="yes"
               fork="yes">
            <jvmarg line="${run.jvmargs}"/>
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="tcp"/>
            </classpath>
            <test name="${unit.test.suite}" haltonfailure="no" todir="${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
        <antcall target="junit.report"/>
    </target>
    <target name="test.integration" depends="clean,check.config,compile.test" description="Runs the IntegrationTestSuite">
        <junit printsummary="yes"
               showoutput="yes"
               fork="yes">
            <jvmarg line="${run.jvmargs}"/>
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="tcp"/>
            </classpath>
            <test name="${integration.test.suite}" haltonfailure="no" todir="${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
        <antcall target="junit.report"/>
        <echo message="Now, manually run thorough.clean to purge KBs and restore the main config"/>
    </target>
    <target name="run-selected-test-in-corpus" depends="clean,compile.test">
        <fail unless="test.class">Must set property 'test.class'</fail>
        <junit printsummary="yes"
               showoutput="yes"
               fork="yes">
            <jvmarg line="${run.jvmargs}"/>
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="tcp"/>
            </classpath>
            <test name="${test.class}" haltonfailure="no" todir="${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
    </target>
    <target name="run-selected-test-in-integration" depends="clean,check.config,compile.test">
        <fail unless="test.class">Must set property 'test.class'</fail>
        <junit printsummary="yes"
               showoutput="yes"
               fork="yes">
            <jvmarg line="${run.jvmargs}"/>
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="tcp"/>
            </classpath>
            <test name="${test.class}" haltonfailure="no" todir="${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
    </target>
    <target name="run-selected-test-in-unit" depends="clean,prep.unit.config,compile.test">
        <fail unless="test.class">Must set property 'test.class'</fail>
        <junit printsummary="yes"
               showoutput="yes"
               fork="yes">
            <jvmarg line="${run.jvmargs}"/>
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="tcp"/>
            </classpath>
            <test name="${test.class}" haltonfailure="no" todir="${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
    </target>
    <target name="run-single-test-method-in-integration" depends="clean,check.config,compile.test">
        <fail unless="test.class">Must set property 'test.class'</fail>
        <junit printsummary="yes"
               showoutput="yes"
               fork="yes">
            <jvmarg line="${run.jvmargs}"/>
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="tcp"/>
            </classpath>
            <test name="${test.class}" methods="${method}" haltonfailure="no" todir="${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
    </target>
    <target name="run-single-test-method-in-unit" depends="clean,prep.unit.config,compile.test">
        <fail unless="test.class">Must set property 'test.class'</fail>
        <junit printsummary="yes"
               showoutput="yes"
               fork="yes">
            <jvmarg line="${run.jvmargs}"/>
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="tcp"/>
            </classpath>
            <test name="${test.class}" methods="${method}" haltonfailure="no" todir="${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
    </target>

    <!--
    =================
    DEPLOY / UNDEPLOY
    =================
    -->

    <target name="stop.tomcat" description="stop web application in tomcat">
<!--        <stop url="${mgr.url}"
              username="${username}"
              password="${password}"
              path="${context}"/>-->
        <exec executable="${catalina.base}/bin/${shutdown}">
            <env key="CATALINA_HOME" value="${catalina.base}"/>
        </exec>
    </target>

    <target name="start.tomcat" description="start web application in tomcat">
<!--        <start url="${mgr.url}"
               username="${username}"
               password="${password}"
               path="${context}"/>-->
        <exec executable="sh">
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_OPS" value="${catalina.ops}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <arg value="-c"/>
            <arg value="'${catalina.base}/bin/${startup}'"/>
        </exec>
        <!--<antcall target="monitor.catalina.out"/>-->
    </target>

    <!-- To debug Tomcat for a running web app in the NB IDE, make sure the
         war is deployed. If Tomcat is running, stop Tomcat, the run this
         target and attach a debugger with the Tomcat (java) PID found from the
         activity monitor, or enter ps -ef on the command line and search for
         apache-tomcat under the CMD column. Can set a breakpoint in the JSPs
         under $CATALINA_HOME/work/Catalina/localhost/sigma/**
    -->
    <target name="debug.sigma.web.app" description="debug web application in tomcat">
        <exec executable="sh">
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_OPS" value="${catalina.ops}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <env key="JPDA_OPTS" value="${agent.lib.args}"/>
            <arg value="-c"/>
            <arg value="'${catalina.base}/bin/${catalina}' jpda start"/>
        </exec>
    </target>

    <available file="${catalina.out}" property="catalina.out.present"/>
    <target name="monitor.catalina.out" if="catalina.out.present">
        <exec executable="tail" dir="${catalina.logs.dir}">
            <arg line="-f '${catalina.out}'"/>
        </exec>
    </target>

    <target name="deploy"
            depends="all"
            description="Builds the web application, starts a local Tomcat server and runs sigmakee">
        <sequential>
            <antcall target="start.tomcat"/>
            <sleep seconds="2"/>
            <deploy url="${mgr.url}"
                    username="${username}"
                    password="${password}"
                    path="${context}"
                    war="${basedir}/${dist.dir}/${app.name}.war"/>
            <sleep seconds="2"/>
            <antcall target="open.sigmakee.url"/>
        </sequential>
    </target>

    <target name="open.sigmakee.url">
        <exec executable="sh">
            <arg value="-c"/>
            <arg value="open -u ${deploy.url}"/>
        </exec>
    </target>

    <target name="undeploy"
            description="Removes the web application and stops the local Tomcat server">
        <sequential>
            <undeploy url="${mgr.url}"
                      username="${username}"
                      password="${password}"
                      path="${context}"/>
            <sleep seconds="2"/>
            <antcall target="stop.tomcat"/>
        </sequential>
    </target>

    <!--
    ===================
    DEBUG TASKS FOR SRC
    ===================
    -->

    <target name="debug-nb" depends="clean,compile">
        <nbjpdastart addressproperty="jpda.address" name="${impl.title}" transport="${debug.transport}">
            <classpath refid="dcp"/>
        </nbjpdastart>
        <java classname="${run.class}"
              classpathref="dcp"
              fork="true">
            <jvmarg value="-agentlib:jdwp=transport=${debug.transport},address=${jpda.address}"/>
            <jvmarg line="${debug.jvmargs}"/>
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <arg line="${run.args}"/>
        </java>
    </target>
    <target name="debug-selected-file-in-java" depends="clean,compile">
        <fail unless="debug.class">Must set property 'debug.class'</fail>
        <nbjpdastart addressproperty="jpda.address" name="${impl.title}" transport="${debug.transport}">
            <classpath refid="dcp"/>
        </nbjpdastart>
        <java classname="${debug.class}"
              classpathref="dcp"
              fork="true">
            <jvmarg value="-agentlib:jdwp=transport=${debug.transport},address=${jpda.address}"/>
            <jvmarg line="${debug.jvmargs}"/>
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <arg line="${run.args}"/>
        </java>
    </target>
    <target name="debug.password.service" depends="clean,compile">
        <nbjpdastart addressproperty="jpda.address" name="${impl.title}" transport="${debug.transport}">
            <classpath refid="dcp"/>
        </nbjpdastart>
        <java classname="com.articulate.sigma.PasswordService"
              classpathref="dcp"
              fork="true">
            <jvmarg value="-agentlib:jdwp=transport=${debug.transport},address=${jpda.address}"/>
            <jvmarg line="${run.jvmargs}"/>
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <arg line="${pword.props}"/>
        </java>
    </target>

    <!--
    =====================
    DEBUG TASKS FOR TESTS
    =====================
    -->

    <target name="debug-selected-test-in-integration" depends="clean,check.config,compile.test">
        <fail unless="test.class">Must set property 'test.class'</fail>
        <nbjpdastart addressproperty="jpda.address" name="${impl.title}" transport="${debug.transport}">
            <classpath refid="tcp"/>
        </nbjpdastart>
        <junit printsummary="yes"
               showoutput="yes"
               fork="yes">
            <jvmarg value="-agentlib:jdwp=transport=${debug.transport},address=${jpda.address}"/>
            <jvmarg line="${run.jvmargs}"/>
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="tcp"/>
            </classpath>
            <test name="${test.class}" haltonfailure="no" todir="${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
    </target>
    <target name="debug-selected-test-in-unit" depends="clean,prep.unit.config,compile.test">
        <fail unless="test.class">Must set property 'test.class'</fail>
        <nbjpdastart addressproperty="jpda.address" name="${impl.title}" transport="${debug.transport}">
            <classpath refid="tcp"/>
        </nbjpdastart>
        <junit printsummary="yes"
               showoutput="yes"
               fork="yes">
            <jvmarg value="-agentlib:jdwp=transport=${debug.transport},address=${jpda.address}"/>
            <jvmarg line="${run.jvmargs}"/>
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <formatter type="plain" usefile="false"/>
            <classpath refid="tcp"/>
            <test name="${test.class}" haltonfailure="no" todir="${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
    </target>
    <target name="debug-single-test-method-in-integration" depends="clean,check.config,compile.test">
        <fail unless="test.class">Must set property 'test.class'</fail>
        <nbjpdastart addressproperty="jpda.address" name="${impl.title}" transport="${debug.transport}">
            <classpath refid="tcp"/>
        </nbjpdastart>
        <junit printsummary="yes"
               showoutput="yes"
               fork="yes">
            <jvmarg value="-agentlib:jdwp=transport=${debug.transport},address=${jpda.address}"/>
            <jvmarg line="${run.jvmargs}"/>
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="tcp"/>
            </classpath>
            <test name="${test.class}" methods="${method}" haltonfailure="no" todir="${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
    </target>
    <target name="debug-single-test-method-in-unit" depends="clean,prep.unit.config,compile.test">
        <fail unless="test.class">Must set property 'test.class'</fail>
        <nbjpdastart addressproperty="jpda.address" name="${impl.title}" transport="${debug.transport}">
            <classpath refid="tcp"/>
        </nbjpdastart>
        <junit printsummary="yes"
               showoutput="yes"
               fork="yes">
            <jvmarg value="-agentlib:jdwp=transport=${debug.transport},address=${jpda.address}"/>
            <jvmarg line="${run.jvmargs}"/>
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="tcp"/>
            </classpath>
            <test name="${test.class}" methods="${method}" haltonfailure="no" todir="${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
    </target>

    <!--
    =====
    ADMIN
    =====
    -->

    <target name="dist" depends="compile" description="Prepare and distribute the ${app.name}.war and ${web.app.name}.jar files and place in ${dist.dir}.">
        <manifest file="${manifest.mf}">
            <attribute name="Built-By" value="${my.name} ${my.email}"/>
            <attribute name="Specification-Title"
                       value="${product.Name}"/>
            <attribute name="Specification-Version"
                       value="${product.version.major}.${product.version.minor}"/>
            <attribute name="Specification-Vendor"
                       value="${spec.vendor}"/>
            <attribute name="Implementation-Title"
                       value="${impl.title}"/>
            <attribute name="Implementation-Version"
                       value="${product.Version} built on ${TODAY_US}"/>
            <attribute name="Implementation-Vendor"
                       value="${nps}, ${moves.institute}, ${savage.research.group}"/>
            <attribute name="Implementation-URL"
                       value="${sumo.url}"/>
            <attribute name="Implementation-Vendor-Id"
                       value="${impl.vendor.id}"/>
            <attribute name="Main-Class"
                       value="${main.class}"/>
        </manifest>
        <war destfile="${dist.dir}/${app.name}.war"
             webxml="${web.dir}/web.xml"
             manifest="${manifest.mf}">
            <metainf file="${project.license}"/>
            <metainf file="${web.dir}/context.xml"/>
            <zipfileset dir="${web.dir}/jsp"/>
            <zipfileset file="${web.dir}/simple.css"/>
            <zipfileset dir="${web.dir}/pixmaps" prefix="pixmaps"/>
            <lib dir="${basedir}/lib">
                <exclude name="junit*"/>
                <exclude name="hamcrest-core*"/>
                <exclude name="tomcat-servlet-api*"/>
            </lib>
            <classes dir="${build.classes}"/>
        </war>
        <jar destfile="${dist.jar}"
             basedir="${build.classes}"
             manifest="${manifest.mf}">
            <metainf file="${project.license}"/>
        </jar>
        <copy todir="${build.home}" file="${dist.jar}"/> <!-- For SUMOjEdit -->
    </target>

    <!-- Copy customized config files for testing -->
    <target name="prep.full.config">
        <copy todir="${sigma_home}/KBs" file="${full.config}" overwrite="true"/>
    </target>
    <!-- SUMO, MILO and domain only -->
    <target name="prep.top.mid.config">
        <!-- Comment out to conduct tests with all KB files listed in config.xml -->
        <copy tofile="${sigma_home}/KBs/config.xml" file="${top.mid.config}" overwrite="true"/>
    </target>
    <!-- SUMO and domain only -->
    <target name="prep.unit.config">
        <copy todir="${test.unit.resources.dir}" file="${top.config}" overwrite="true"/>
    </target>
    <!-- SUMO and domain only -->
    <target name="prep.top.only.config">
        <copy tofile="${sigma_home}/KBs/config.xml" file="${top.config}" overwrite="true"/>
    </target>
    <target name="prep.tiny.sumo.config">
        <copy tofile="${sigma_home}/KBs/config.xml" file="${tiny.sumo.config}" overwrite="true"/>
    </target>
    <target name="thorough.clean" depends="clean">
        <antcall target="clear.kbs"/>
        <delete includeemptydirs="true" failonerror="false">
            <!-- Delete the old web code -->
            <fileset dir="${deploy_home}"/>
            <fileset dir="${catalina.base}/work/Catalina/localhost/${app.name}"/>
            <!-- JUnit generated products -->
            <fileset dir="${basedir}">
                <include name="junit*.properties"/>
                <include name="*.owl"/>
                <include name="*.tab"/>
                <include name="prover_out.txt"/>
                <include name="*.p"/>
            </fileset>
            <fileset dir="${sigma_home}/KBs">
                <include name="*.ser"/>
            </fileset>
            <fileset dir="${sigma_home}/KBs/WordNetMappings">
                <include name="*.ser"/>
            </fileset>
        </delete>
        <delete file="${dist_war}"/>
        <antcall target="delete.catalina.logs"/>
    </target>
    <target name="clear.kbs">
        <delete>
            <!-- Prune KB after integration tests -->
            <fileset dir="${sigma_home}/KBs">
                <include name="*.fof"/>
                <include name="*.tff"/>
                <include name="*.tptp"/>
                <include name="kbmanager.ser"/>
                <include name="*UserAssertions.kif"/>
                <include name="vamp-out.txt"/>
            </fileset>
        </delete>
    </target>
    <target name="delete.catalina.logs">
        <delete>
            <fileset dir="${catalina.logs.dir}">
                <include name="*.*"/>
            </fileset>
        </delete>
    </target>
    <target name="all" depends="clean,dist">
        <echo message="System date/time is: ${TODAY_US}"/>
    </target>

    <!--
    =========
    UTILITIES
    =========
    -->

    <target name="run.ontology.process" depends="check.config">
        <!-- Generate TPTP by translating the KB to FOF or TFF -->
        <antcall target="run">
            <!-- FOF -->
            <param name="run.class"
                   value="com.articulate.sigma.trans.SUMOKBtoTPTPKB"/>
        </antcall>
        <antcall target="run">
            <!-- TFF -->
            <param name="run.class"
                   value="com.articulate.sigma.trans.SUMOKBtoTFAKB"/>
        </antcall>
        <!-- Run Vampire on the tptp saving proof to file -->
        <!-- Ensure either *.fof or *.tff is set for the tptp.ext prop in
             build.properties as well as desired vamp.time -->
        <antcall target="run.vampire"/>
        <!-- Run analysis on the proof -->
        <antcall target="run">
            <!-- FOF -->
            <param name="run.class"
                   value="com.articulate.sigma.trans.TPTP3ProofProcessor"/>
            <param name="run.args"
                   value="-f ${vamp.out.file}"/>
        </antcall>
        <!-- View the proof -->
        <antcall target="view.proof"/>
    </target>

    <target name="run.vampire" description="Assumes that ${sigma_home}/KBs/SUMO.* has already been generated">
        <echo message="Running vampire with: [${vamp.args}]"/>
        <exec executable="sh">
            <arg value="-c"/>
            <arg value="${programs.dir}/vampire/build/vampire ${vamp.args}"/>
        </exec>
        <loadfile property="vamp.out" srcFile="${vamp.out.file}"/>
        <echo message="${vamp.out}"/>
    </target>

    <target name="run.dot" description="Run the GraphViz image producer on a *.dot file">
        <echo message="Running dot with: [${dot.args}]"/>
        <exec executable="sh">
            <arg value="-c"/>
            <arg value="${dot.cmd} ${dot.args}"/>
        </exec>
        <antcall target="view.proof"/>
    </target>

    <target name="view.proof" description="View the proof image produced by GraphViz">
        <exec executable="sh" osfamily="mac">
            <arg value="-c"/>
            <arg value="open -a 'Google Chrome' ${dot.image.file}"/>
        </exec>
    </target>

    <!-- Make sure to run removeMath.sh on *.tff files first -->
    <target name="run.leo" description="Runs a check on a given TPTP file">
        <echo message="Running leo with: [${leo.args}]"/>
        <java jar="${leo.jar}">
            <jvmarg line="${run.jvmargs}"/>
            <arg line="${leo.args}"/>
        </java>
    </target>

    <target name="-profile-check" depends="clean,compile">
        <startprofiler freeform="true"/>
    </target>
    <target depends="-profile-check" description="Runs a main class with ${run.class} with ${run.args} set in build.properties" if="profiler.configured" name="profile-nb">
        <java classname="${run.class}" classpathref="rcp" fork="true">
            <jvmarg line="${run.jvmargs}"/>
            <env key="SIGMA_HOME" value="${sigma_home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_HOME" value="${catalina.base}"/>
            <env key="SIGMA_EMAIL_ADDRESS" value="${my.email}"/>
            <env key="SIGMA_EMAIL_USER" value="${my.email}"/>
            <env key="SIGMA_EMAIL_PASS" value="${my.pw}"/>
            <env key="SIGMA_EMAIL_SERVER" value="${my.server}"/>
            <arg line="${run.args}"/>
            <jvmarg line="${agent.jvmargs}"/>
        </java>
    </target>

</project>
