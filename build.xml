<project xmlns:ivy="antlib:org.apache.ivy.ant"
         name="SigmaKEE" default="all" basedir=".">
    <description>
        This build file is meant to be invoked only from the command line. It's
        purpose is for building/testing in a CI/CD environment
    </description>

    <!--
    ===
    IVY
    ===
    -->

    <property name="ivy.install.version" value="2.5.1"/>
    <property name="ivy.home" value="${basedir}/.ivy"/>
    <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

    <target name="check.for.ivy.jar">
        <available file="${ivy.jar.file}" property="ivy.present"/>
    </target>

    <target name="download-ivy" depends="check.for.ivy.jar" unless="ivy.present">
        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
        <!-- try to load Ivy here from Ivy home, in case the user has not already dropped
             it into Ant's lib dir (note that the latter copy will always take precedence).
             We will not fail as long as local lib dir exists (it may be empty) and
             Ivy is in at least one of Ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <ivy:retrieve/>

        <path id="compile.classpath">
            <fileset dir="${basedir}/lib">
                <include name="*.jar"/>
                <exclude name="junit*"/>
                <exclude name="hamcrest*"/>
            </fileset>
        </path>
        <path id="compile.test.classpath">
            <path refid="compile.classpath"/>
            <pathelement location="${build.classes.dir}"/>
            <pathelement path="${basedir}/lib/hamcrest-core-1.3.jar:${basedir}/lib/junit-4.13.2.jar"/>
        </path>
        <path id="run.test.classpath">
            <path refid="compile.test.classpath"/>
            <pathelement location="${build.test.classes.dir}"/>
        </path>
    </target>

    <!--
    ====
    INIT
    ====
    -->

    <property name="impl.title" value="${ant.project.name}"/>
    <property name="product.Name" value="Sigma Knowledge Engineering Environment (${impl.title})"/>
    <property name="product.version.major" value="1"/>
    <property name="product.version.minor" value="0"/>
    <property name="product.version.patch" value="0"/>
    <property name="product.Version" value="${product.version.major}.${product.version.minor}.${product.version.patch}"/>
    <property name="spec.vendor" value="Adam Pease"/>
    <property name="nps" value="Naval Postgraduate School (NPS), Monterey, CA"/>
    <property name="cs.dept" value="Computer Science (CS) DEPT"/>
    <property name="sumo.url" value="http://www.ontologyportal.org"/>
    <property name="manifest.mf" value="MANIFEST.MF"/>
    <property name="main.class" value="com.articulate.sigma.KB"/>
    <property name="impl.vendor.id" value="edu.nps.cs"/>

    <property name="src.dir" value="src/java"/>
    <property name="test.corpus.dir" value="test/corpus/java"/>
    <property name="test.integration.dir" value="test/integration/java"/>
    <property name="test.unit.dir" value="test/unit/java"/>
    <property name="web.app.name" value="sigma"/>
    <property name="app.name" value="${web.app.name}kee"/>
    <property name="build.home" value="build"/>
    <property name="build.classes.dir" value="${build.home}/WEB-INF/classes"/>
    <property name="build.lib" value="${build.home}/lib"/>
    <property name="build.test.classes.dir" value="${build.home}/test/classes"/>
    <property name="dist.dir" value="dist"/>
    <property name="dist.jar" value="${dist.dir}/${app.name}.jar"/>
    <property name="dist.javadoc.dir" value="doc"/>
    <property name="web.dir" value="web"/>
    <property name="reports.dir" value="${build.home}/test/results"/>
    <property name="unit.test.suite" value="com.articulate.sigma.UnitTestSuite"/>
    <property name="integration.test.suite" value="com.articulate.sigma.IntegrationTestSuite"/>
    <property name="report.html" value="file:${basedir}/${reports.dir}/html/index.html"/>

    <property environment="env"/>
    <property name="tomcat.home" value="${env.CATALINA_HOME}"/>
    <property name="dist.home" value="${tomcat.home}/webapps"/>
    <property name="dist.war" value="${dist.home}/${web.app.name}.war"/>
    <property name="deploy.home" value="${dist.home}/${web.app.name}"/>
    <property name="git.home" value="${env.ONTOLOGYPORTAL_GIT}"/>
    <property name="sigma.src" value="${git.home}/${app.name}"/>
    <property name="basedir" value="${sigma.src}"/>
    <property name="sigma.home" value="${env.SIGMA_HOME}"/>
    <property name="tptp.home" value="../TPTP-ANTLR"/>
    <property name="sigma.install.downloads" value="${sigma.home}/downloads"/>
    <property name="sigma.utils.home" value="../SigmaUtils"/>
    <property name="kbs.home" value="${git.home}/sumo"/>

    <property name="javac.release" value="11"/>
    <property name="run.jvmargs" value="-Xmx10g -Xss1m"/>
    <property name="tomcat.version" value="9.0.97"/>

    <!-- Define the sigma user spaces -->
    <property name="workspace.dir" value="${user.home}/workspace"/>
    <property name="programs.dir" value="${user.home}/Programs"/>

    <condition property="isUnixNotMac">
        <and>
            <os family="unix"/>

            <not>
                <os family="mac"/>
            </not>

        </and>
    </condition>

    <path id="core.sourcepath">
        <pathelement path="${src.dir}/com/articulate/sigma"/>
        <pathelement path="${src.dir}/com/articulate/delphi"/>
    </path>
    <path id="test.sourcepath">
        <pathelement path="${test.corpus.dir}/com/articulate/sigma"/>
        <pathelement path="${test.unit.dir}/com/articulate/sigma"/>
        <pathelement path="${test.integration.dir}/com/articulate/sigma"/>
    </path>

    <target name="init" depends="init-ivy">
        <condition property="jdk21+">
            <javaversion atleast="21"/>
        </condition>
        <fail message="Unsupported JDK version: ${ant.java.version}. Please use JDK version 21 or greater."
              unless="jdk21+">
        </fail>

        <echo message="Welcome to the ${product.Name} v${product.Version}"/>
        <echo message="Specification Vendor:     ${spec.vendor}"/>
        <echo message=""/>
        <echo message="CATALINA_HOME is set to:  ${tomcat.home}"/>
        <echo message="SIGMA_HOME    is set to:  ${sigma.home}"/>
        <echo message="SIGMA_SRC     is set to:  ${sigma.src}"/>
        <echo message="KBs_HOME      is set to:  ${kbs.home}"/>
        <echo message="Git dir       is set to:  ${git.home}"/>
        <echo message="basedir       is set to:  ${basedir}"/>
        <echo message="classpath:                ${env.SIGMA_CP}"/>
        <echo message="Java Version via Ant:     ${ant.java.version}"/>
        <echo message="Java Version System Prop: ${java.version}"/>

        <tstamp>
            <format property="TODAY_US" pattern="EEE, d MMM yyyy HHmm Z" locale="en,US"/>
        </tstamp>
    </target>

    <target name="deploy_prepare" depends="init" description="Prepare for deploying code to sigma.war">
        <mkdir dir="${build.classes.dir}"/>

        <!-- Copy all the *.jsp, *.xsl, *.html, pixmaps, etc. -->
        <copy todir="${build.home}" overwrite="yes">
            <fileset dir="${web.dir}/jsp"/>
            <fileset file="${web.dir}/simple.css"/>
        </copy>
        <copy todir="${build.home}/pixmaps">
            <fileset dir="${web.dir}/pixmaps"/>
        </copy>
    </target>

    <!--
    ============
    BUILD / DIST
    ============
    -->

    <target name="TPTP" depends="deploy_prepare">
        <echo message="SIGMA_HOME is set to: ${sigma.home}"/>
        <echo message="TPTP is set to: ${tptp.home}"/>
        <!-- TPTP already builds SigmaUtils -->
        <ant antfile="${tptp.home}/build.xml" inheritAll="false" target="all"/>
        <copy todir="${basedir}/lib" file="${tptp.home}/tptp.jar"/>
        <copy todir="${basedir}/lib" file="${sigma.utils.home}/sigmaUtils.jar"/>
        <!-- Create WEB-INF/lib/ and copy over the needed jar files. -->
        <copy todir="${build.home}/WEB-INF/lib" flatten="true">
            <path refid="compile.classpath"/>
        </copy>
    </target>

    <target name="compile" depends="TPTP" description="Compile the project and place in ${build.classes.dir}.">
        <javac destdir="${build.classes.dir}"
               debug="on"
               optimize="on"
               deprecation="on"
               includeantruntime="false"
               classpathref="compile.classpath"
               release="${javac.release}">
            <src refid="core.sourcepath"/>
        </javac>
    </target>
    <target name="compile.test" depends="compile" description="Compile the project's test classes.">
        <mkdir dir="${build.test.classes.dir}"/>
        <javac destdir="${build.test.classes.dir}"
               debug="on"
               optimize="on"
               deprecation="on"
               includeantruntime="false"
               classpathref="compile.test.classpath"
               release="${javac.release}">
            <src refid="test.sourcepath"/>
        </javac>
        <mkdir dir="${reports.dir}"/>
    </target>

    <target name="dist" depends="compile" description="Create the *.war file and place in ${dist.dir}.">
        <manifest file="${manifest.mf}">
            <attribute name="Built-By" value="${user.name}"/>
            <attribute name="Specification-Title"
                       value="${product.Name}"/>
            <attribute name="Specification-Version"
                       value="${product.version.major}.${product.version.minor}"/>
            <attribute name="Specification-Vendor"
                       value="${spec.vendor}"/>
            <attribute name="Implementation-Title"
                       value="${impl.title}"/>
            <attribute name="Implementation-Version"
                       value="${product.Version} built on ${TODAY_US}"/>
            <attribute name="Implementation-Vendor"
                       value="${nps}, ${cs.dept}"/>
            <attribute name="Implementation-URL"
                       value="${sumo.url}"/>
            <attribute name="Implementation-Vendor-Id"
                       value="${impl.vendor.id}"/>
            <attribute name="Main-Class"
                       value="${main.class}"/>
        </manifest>
        <war destfile="${dist.war}"
             webxml="${web.dir}/web.xml"
             manifest="${manifest.mf}">
            <metainf file="LICENSE"/>
            <zipfileset dir="${web.dir}/jsp"/>
            <zipfileset file="${web.dir}/simple.css"/>
            <zipfileset dir="${web.dir}/pixmaps" prefix="pixmaps"/>
            <lib dir="${basedir}/lib">
                <exclude name="junit*"/>
                <exclude name="hamcrest*"/>
                <exclude name="tomcat-servlet-api*"/>
            </lib>
            <classes dir="${build.classes.dir}"/>
        </war>
        <jar destfile="${build.home}/${app.name}.jar"
             manifest="${manifest.mf}">
            <metainf file="LICENSE"/>
            <fileset dir="${build.classes.dir}"/>
        </jar>
    </target>

    <!--
    ==========
    UNIT TESTS <- These are only meant to be run within the CI environment
    ==========
    -->

    <target name="test.unit" depends="compile.test" description="Runs the UnitTestSuite">
        <junit printsummary="yes"
               showoutput="yes"
               fork="yes">
            <jvmarg line="${run.jvmargs}"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="run.test.classpath"/>
            </classpath>
            <test name="${unit.test.suite}" haltonfailure="no" todir="${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
        <antcall target="junit.report"/>
    </target>
    <target name="test.integration" depends="compile.test" description="Runs the IntegrationTestSuite">
        <junit printsummary="yes"
               showoutput="yes"
               fork="yes">
            <jvmarg line="${run.jvmargs}"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="run.test.classpath"/>
            </classpath>
            <test name="${integration.test.suite}" haltonfailure="no" todir="${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
        <antcall target="junit.report"/>
        <!-- Prune KB after integration tests -->
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${sigma.home}/KBs">
                <include name="*.tptp"/>
                <include name="*.ser"/>
            </fileset>
        </delete>
    </target>
    <target name="junit.report" >
        <junitreport todir="${reports.dir}">
            <fileset dir="${reports.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${reports.dir}/html"/>
        </junitreport>
        <antcall target="open.junit.report"/>
    </target>
    <target name="open.junit.report" depends="report.mac,report.unix"/>
    <target name="report.mac" unless="isUnixNotMac">
        <exec executable="sh" osfamily="mac">
            <arg value="-c"/>
            <arg value="open -u ${report.html}"/>
        </exec>
    </target>
    <target name="report.unix" if="isUnixNotMac">
        <exec executable="sh" osfamily="unix">
            <arg value="-c"/>
            <arg value="xdg-open ${report.html}"/>
        </exec>
    </target>

    <!--
    =====
    ADMIN
    =====
    -->

    <!-- target name="all" depends="dist, api_doc" -->
    <target name="all" depends="clean,dist">
        <echo>System date/time is: ${TODAY_US}</echo>
    </target>

    <!-- Works only from the CLI -->
    <target name="clean" description="Delete old build, lib, dist and deployed web aritifacts">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${build.home}"/> <!-- avoid problems with package name changes by deleting everything -->
            <fileset dir="${dist.dir}"/>
            <!-- Delete the old web code -->
            <fileset dir="${deploy.home}"/>
            <fileset dir="${tomcat.home}/work/Catalina/localhost/${web.app.name}"/>
            <!-- Prune out of date dependencies -->
            <fileset dir="${basedir}/lib"> <!-- keep ./lib -->
                <include name="*.jar"/>
            </fileset>
        </delete>
        <delete file="${dist.war}"/>
    </target>

    <!-- At this point we will assume you have already complied with the
         README.md under the heading "System preparation on Linux." This task
         will take over from the heading "Linux Installation."  -->
    <target name="install" depends="init" description="Clones Sigma tools, installs WordNetMappings and SUMO to ${sigma.home}/KBs and builds the E and Vampire Theorem provers">
        <mkdir dir="${workspace.dir}"/>
        <mkdir dir="${programs.dir}"/>

        <!-- Install Tomcat -->
        <antcall target="install.tomcat"/>

        <!-- Retrieve WordNet -->
        <antcall target="retrieve.wordnet"/>

        <!-- Retrieve E prover -->
        <antcall target="retrieve.E"/>

        <!-- Clone the sigma tools -->
        <antcall target="clone.sumo"/>
        <antcall target="clone.tptpantlr"/>
        <antcall target="clone.sigmautils"/>

        <!-- Copy sumo and WordNet files to ${sigma.home} -->
        <antcall target="copy.to.sigma.home"/>

        <!-- Build E theorem prover -->
        <antcall target="build.E"/>

        <!-- Clone and build Vampire theorem prover w/ Z3 -->
        <antcall target="clone.vampire"/>
        <antcall target="clone.z3"/>
        <antcall target="build.z3"/>
        <antcall target="build.vampire"/>

        <!-- Configure ~/.bashrc ~/.zshrc -->
        <antcall target="append.bashrc"/>
        <antcall target="append.zshrc"/>
    </target>

    <target name="retrieve.wordnet">
        <get src="https://wordnetcode.princeton.edu/3.0/WordNet-3.0.tar.gz" dest="${programs.dir}" tryGzipEncoding="true"/>
        <untar src="${programs.dir}/WordNet-3.0.tar.gz" dest="${programs.dir}" compression="gzip"/>
        <delete file="${programs.dir}/WordNet-3.0.tar.gz"/>
    </target>

    <target name="retrieve.E">
        <get src="https://wwwlehre.dhbw-stuttgart.de/~sschulz/WORK/E_DOWNLOAD/V_2.0/E.tgz" dest="${programs.dir}" tryGzipEncoding="true"/>
        <untar src="${programs.dir}/E.tgz" dest="${programs.dir}" compression="gzip"/>
        <delete file="${programs.dir}/E.tgz"/>
    </target>

    <target name="copy.to.sigma.home">
        <mkdir dir="${user.home}/.${app.name}"/>
        <mkdir dir="${user.home}/.${app.name}/KBs"/>
        <copy todir="${user.home}/.${app.name}/KBs">
            <fileset dir="${kbs.home}"/>
        </copy>
        <copy todir="${user.home}/.${app.name}/KBs">
            <fileset file="${sigma.src}/config.xml"/>
        </copy>
        <replace file="${user.home}/.${app.name}/KBs/config.xml" token="/home/theuser" value="${user.home}"/>
        <copy todir="${user.home}/.${app.name}/KBs/WordNetMappings">
            <fileset dir="${programs.dir}/WordNet-3.0/dict"/>
        </copy>
    </target>

    <target name="clone.sumo">
        <mkdir dir="${workspace.dir}/sumo"/>
        <git command="clone" dir="${workspace.dir}/sumo">
            <args>
                <arg value="--progress"/>
                <arg value="--verbose"/>
                <arg value="https://github.com/ontologyportal/sumo"/>
                <arg value="${workspace.dir}/sumo"/>
            </args>
        </git>
    </target>
    <target name="clone.tptpantlr">
        <mkdir dir="${workspace.dir}/TPTP-ANTLR"/>
        <git command="clone" dir="${workspace.dir}/TPTP-ANTLR">
            <args>
                <arg value="--progress"/>
                <arg value="--verbose"/>
                <arg value="https://github.com/ontologyportal/TPTP-ANTLR"/>
                <arg value="${workspace.dir}/TPTP-ANTLR"/>
            </args>
        </git>
    </target>
    <target name="clone.sigmautils">
        <mkdir dir="${workspace.dir}/SigmaUtils"/>
        <git command="clone" dir="${workspace.dir}/SigmaUtils">
            <args>
                <arg value="--progress"/>
                <arg value="--verbose"/>
                <arg value="https://github.com/ontologyportal/SigmaUtils"/>
                <arg value="${workspace.dir}/SigmaUtils"/>
            </args>
        </git>
    </target>
    <target name="clone.vampire">
        <mkdir dir="${programs.dir}/vampire"/>
        <git command="clone" dir="${programs.dir}/vampire">
            <args>
                <arg value="--progress"/>
                <arg value="--verbose"/>
                <arg value="https://github.com/vprover/vampire.git"/>
                <arg value="${programs.dir}/vampire"/>
            </args>
        </git>
    </target>
    <target name="clone.z3">
        <git command="submodule" dir="${programs.dir}/vampire">
            <args>
                <arg value="update"/>
                <arg value="--init"/>
            </args>
        </git>
    </target>
    <target name="update.sigmakee">
        <git command="pull" dir=".">
            <args>
                <arg value="--progress"/>
                <arg value="--verbose"/>
                <arg value="https://github.com/ontologyportal/https://github.com/ontologyportal/${app.name}"/>
                <arg value="."/>
            </args>
        </git>
    </target>

    <!-- git macro utils setup from: https://tonyyan.wordpress.com/2017/03/10/integrate-git-into-ant-targets/-->
    <macrodef name="git">
        <attribute name="command"/>
        <attribute name="dir" default="${workspace.dir}"/>
        <element name="args" optional="true"/>
        <sequential>
            <echo message="git @{command}"/>
            <exec executable="git" dir="@{dir}">
                <arg value="@{command}"/>
                <args/>
            </exec>
        </sequential>
    </macrodef>

    <target name="install.tomcat">
        <get src="https://archive.apache.org/dist/tomcat/tomcat-9/v${tomcat.version}/bin/apache-tomcat-${tomcat.version}.zip" dest="${programs.dir}" tryGzipEncoding="true"/>
        <unzip src="${programs.dir}/apache-tomcat-${tomcat.version}.zip" dest="${programs.dir}"/>
        <chmod dir="${programs.dir}/apache-tomcat-${tomcat.version}/bin" perm="ugo+rx" includes="**/*.sh"/>
        <chmod dir="${programs.dir}/apache-tomcat-${tomcat.version}/webapps" perm="ugo+rx" includes="**/*.sh"/>
        <delete file="${programs.dir}/apache-tomcat-${tomcat.version}.zip"/>
    </target>

    <target name="build.E">
        <chmod dir="${programs.dir}/E/configure" perm="ugo+rx"/>
        <exec executable="sh" dir="${programs.dir}/E">
            <arg value="-c"/>
            <arg value="./configure"/>
        </exec>
        <exec executable="sh" dir="${programs.dir}/E">
            <arg value="-c"/>
            <arg value="make"/>
        </exec>
        <replace file="${user.home}/.${app.name}/KBs/config.xml" token="${user.home}/E/bin/e_ltb_runner" value="${programs.dir}/E/PROVER/e_ltb_runner"/>
    </target>

    <target name="build.z3">
        <mkdir dir="${programs.dir}/vampire/z3/build"/>
        <exec executable="cmake" dir="${programs.dir}/vampire/z3/build">
            <arg value=".."/>
            <arg value="-DZ3_SINGLE_THREADED=1 -DCMAKE_BUILD_TYPE=Release"/>
        </exec>
        <exec executable="sh" dir="${programs.dir}/vampire/z3/build">
            <arg value="-c"/>
            <arg value="make"/>
        </exec>
    </target>

    <target name="build.vampire">
        <mkdir dir="${programs.dir}/vampire/build"/>
        <exec executable="cmake" dir="${programs.dir}/vampire/build">
            <arg value=".."/>
        </exec>
        <exec executable="sh" dir="${programs.dir}/vampire/build">
            <arg value="-c"/>
            <arg value="make"/>
        </exec>
    </target>

    <!-- Vampire is currently failing to build on Hamming. Here is a alternate source of the binary -->
    <target name="alternate.vampire">
        <get src="https://github.com/vprover/vampire/releases/download/v4.9casc2024/vampire" dest="${programs.dir}/vampire/build" tryGzipEncoding="true"/>
        <chmod dir="${programs.dir}/${programs.dir}/vampire/build" perm="ugo+rx" includes="vampire"/>
    </target>

    <target name="append.bashrc" if="isUnixNotMac">
        <echo file="${user.home}/.bashrc" append="true">
# For SIGMA
export SIGMA_HOME=${user.home}/.${app.name}
export ONTOLOGYPORTAL_GIT=${workspace.dir}
export SIGMA_SRC=$ONTOLOGYPORTAL_GIT/${app.name}
export CATALINA_OPTS="$CATALINA_OPTS ${run.jvmargs}"
export CATALINA_HOME=${programs.dir}/apache-tomcat-${tomcat.version}
export PATH=$CATALINA_HOME/bin:$PATH
export SIGMA_CP=$SIGMA_SRC/build/${app.name}.jar:$SIGMA_SRC/lib/*
</echo>
    </target>

    <target name="append.zshrc" unless="isUnixNotMac">
        <echo file="${user.home}/.zshrc" append="true">
# For SIGMA
export SIGMA_HOME=${user.home}/.${app.name}
export ONTOLOGYPORTAL_GIT=${workspace.dir}
export SIGMA_SRC=$ONTOLOGYPORTAL_GIT/${app.name}
export CATALINA_OPTS="$CATALINA_OPTS ${run.jvmargs}"
export CATALINA_HOME=${programs.dir}/apache-tomcat-${tomcat.version}
export PATH=$CATALINA_HOME/bin:$PATH
export SIGMA_CP=$SIGMA_SRC/build/${app.name}.jar:$SIGMA_SRC/lib/*
</echo>
    </target>

    <target name="api_doc" depends="init" description="Build the JavaDocs and place in ${dist.javadoc.dir}.">
        <javadoc sourcepath="${src.dir}" destdir="${dist.javadoc.dir}" author="true" version="true" use="true"
                 windowtitle="Sigma API Specification" splitindex="true" packagenames="com.articulate.sigma.*">
            <classpath refed="compile.classpath"/>
            <doctitle>Sigma API Specification</doctitle>
            <header><![CDATA[<b>Sigma API Specification</b>]]></header>
            <group title="Sigma" packages="com.articulate.sigma.*"/>
            <group title="Sigma TPTPWorld" packages="TPTPWorld.*"/>
            <group title="Sigma TPTP Parser" packages="tptp_parser.*"/>
        </javadoc>
    </target>

</project>
