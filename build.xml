<project xmlns:ivy="antlib:org.apache.ivy.ant"
         name="SigmaKEE" default="all" basedir=".">
    <description>This build file meant to be invoked only from the command line.
                 It's purpose is for building/testing in CI environment</description>

    <!--
    ===
    IVY
    ===
    -->

    <property name="ivy.install.version" value="2.5.1"/>
    <property name="ivy.home" value="${basedir}/.ivy"/>
    <property name="ivy.jar.dir" value="${ivy.home}/lib"/>
    <property name="ivy.jar.file" value="${ivy.jar.dir}/ivy.jar"/>

    <target name="check.for.ivy.jar">
        <available file="${ivy.jar.file}" property="ivy.present"/>
    </target>

    <target name="download-ivy" depends="check.for.ivy.jar" unless="ivy.present">
        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
        <!-- try to load Ivy here from Ivy home, in case the user has not already dropped
             it into Ant's lib dir (note that the latter copy will always take precedence).
             We will not fail as long as local lib dir exists (it may be empty) and
             Ivy is in at least one of Ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <ivy:retrieve/>
    </target>

    <!--
    ====
    INIT
    ====
    -->

    <property name="impl.title" value="SigmaKEE"/>
    <property name="product.Name" value="Sigma Knowledge Engineering Environment (${impl.title})"/>
    <property name="product.version.major" value="1"/>
    <property name="product.version.minor" value="0"/>
    <property name="product.version.patch" value="0"/>
    <property name="product.Version" value="${product.version.major}.${product.version.minor}.${product.version.patch}"/>
    <property name="spec.vendor" value="Adam Pease"/>
    <property name="nps" value="Naval Postgraduate School (NPS), Monterey, CA"/>
    <property name="cs.dept" value="Computer Science (CS) DEPT"/>
    <property name="sumo.url" value="http://www.ontologyportal.org"/>
    <property name="manifest.mf" value="MANIFEST.MF"/>
    <property name="main.class" value="com.articulate.sigma.KB"/>
    <property name="impl.vendor.id" value="edu.nps.cs"/>

    <property name="src.dir" value="src/java"/>
    <property name="test.corpus.dir" value="test/corpus/java"/>
    <property name="test.integration.dir" value="test/integration/java"/>
    <property name="test.unit.dir" value="test/unit/java"/>
    <property name="web.app.name" value="sigma"/>
    <property name="app.name" value="${web.app.name}kee"/>
    <property name="build.home" value="build"/>
    <property name="build.classes.dir" value="${build.home}/WEB-INF/classes"/>
    <property name="build.lib" value="${build.home}/lib"/>
    <property name="build.test.classes.dir" value="${build.home}/test/classes"/>
    <property name="dist.dir" value="dist"/>
    <property name="dist.jar" value="${dist.dir}/${app.name}.jar"/>
    <property name="dist.javadoc.dir" value="${dist.dir}/doc/api"/>
    <property name="web.dir" value="web"/>
    <property name="reports.dir" value="${build.home}/reports"/>
    <property name="unit.test.suite" value="com.articulate.sigma.UnitTestSuite"/>
    <property name="integration.test.suite" value="com.articulate.sigma.IntegrationTestSuite"/>
    <property name="report.html" value="file:${basedir}/${reports.dir}/html/index.html"/>

    <property environment="env"/>
    <property name="tomcat.home" value="${env.CATALINA_HOME}"/>
    <property name="git.home" value="${env.ONTOLOGYPORTAL_GIT}"/>
    <property name="sigma.src" value="${git.home}/${app.name}"/>
    <property name="basedir" value="${sigma.src}"/>
    <property name="sigma.home" value="${env.SIGMA_HOME}"/>
    <property name="tptp.home" value="../TPTP-ANTLR"/>
    <property name="sigma.install.downloads" value="${sigma.home}/downloads"/>
    <property name="sigma.utils.home" value="../SigmaUtils"/>
    <property name="kbs.home" value="${git.home}/sumo"/>
    <property name="dist.home" value="${tomcat.home}/webapps"/>
    <property name="deploy.home" value="${dist.home}/${web.app.name}"/>
    <property name="dist.war" value="${dist.home}/${web.app.name}.war"/>

    <property name="javac.release" value="11"/>
    <property name="run.jvmargs" value="-Xmx10g"/>

    <path id="compile.classpath">
        <fileset dir="${basedir}/lib">
            <include name="*.jar"/>
            <exclude name="junit*"/>
            <exclude name="hamcrest*"/>
        </fileset>
    </path>
    <path id="compile.test.classpath">
        <path refid="compile.classpath"/>
        <pathelement location="${build.classes.dir}"/>
        <pathelement path="${basedir}/lib/hamcrest-core-1.3.jar:${basedir}/lib/junit-4.13.2.jar"/>
    </path>
    <path id="run.test.classpath">
        <path refid="compile.test.classpath"/>
        <pathelement location="${build.test.classes.dir}"/>
    </path>
    <path id="core.sourcepath">
        <pathelement path="${src.dir}/com/articulate/sigma"/>
        <pathelement path="${src.dir}/com/articulate/delphi"/>
    </path>
    <path id="test.sourcepath">
        <pathelement path="${test.corpus.dir}/com/articulate/sigma"/>
        <pathelement path="${test.unit.dir}/com/articulate/sigma"/>
        <pathelement path="${test.integration.dir}/com/articulate/sigma"/>
    </path>

    <target name="init" depends="init-ivy">
        <echo message="Welcome to the ${product.Name} v${product.Version}"/>
        <echo message="Specification Vendor:     ${spec.vendor}"/>
        <echo message=""/>
        <echo message="CATALINA_HOME is set to:  ${tomcat.home}"/>
        <echo message="SIGMA_HOME    is set to:  ${sigma.home}"/>
        <echo message="SIGMA_SRC     is set to:  ${sigma.src}"/>
        <echo message="KBs_HOME      is set to:  ${kbs.home}"/>
        <echo message="Git dir       is set to:  ${git.home}"/>
        <echo message="basedir       is set to:  ${basedir}"/>
        <echo message="classpath:                ${env.SIGMA_CP}"/>
        <echo message="Java Version via Ant:     ${ant.java.version}"/>
        <echo message="Java Version System Prop: ${java.version}"/>

        <tstamp>
            <format property="TODAY_US" pattern="EEE, d MMM yyyy HHmm Z" locale="en,US"/>
        </tstamp>
    </target>

    <target name="prepare" depends="init" description="Prepare for deploying code to sigma.war">
        <mkdir dir="${build.classes.dir}"/>

        <!-- Copy all the *.jsp, *.xsl, *.html, pixmaps, etc. -->
        <copy todir="${build.home}" overwrite="yes">
            <fileset dir="${web.dir}/jsp"/>
            <fileset file="${web.dir}/simple.css"/>
        </copy>
        <copy todir="${build.home}/pixmaps">
            <fileset dir="${web.dir}/pixmaps"/>
        </copy>
    </target>

    <!--
    ============
    BUILD / DIST
    ============
    -->

    <target name="TPTP" depends="prepare">
        <echo message="SIGMA_HOME is set to: ${sigma.home}"/>
        <echo message="TPTP is set to: ${tptp.home}"/>
        <!-- TPTP already builds SigmaUtils -->
        <ant antfile="${tptp.home}/build.xml" inheritAll="false" target="all"/>
        <copy todir="${basedir}/lib" file="${tptp.home}/tptp.jar"/>
        <copy todir="${basedir}/lib" file="${sigma.utils.home}/sigmaUtils.jar"/>
        <!-- Create WEB-INF/lib/ and copy over the needed jar files. -->
        <copy todir="${build.home}/WEB-INF/lib" flatten="true">
            <path refid="compile.classpath"/>
        </copy>
    </target>

    <target name="compile" depends="TPTP" description="Compile the project and place in ${build.classes.dir}.">
        <javac destdir="${build.classes.dir}"
               debug="on"
               optimize="on"
               deprecation="on"
               includeantruntime="false"
               classpathref="compile.classpath"
               release="${javac.release}">
            <src refid="core.sourcepath"/>
        </javac>
    </target>
    <target name="compile.test" depends="compile" description="Compile the project's test classes.">
        <mkdir dir="${build.test.classes.dir}"/>
        <javac destdir="${build.test.classes.dir}"
               debug="on"
               optimize="on"
               deprecation="on"
               includeantruntime="false"
               classpathref="compile.test.classpath"
               release="${javac.release}">
            <src refid="test.sourcepath"/>
        </javac>
        <mkdir dir="${reports.dir}"/>
    </target>

    <target name="dist" depends="compile" description="Create the *.war file and place in ${dist.dir}.">
        <manifest file="${manifest.mf}">
            <attribute name="Built-By" value="${user.name}"/>
            <attribute name="Specification-Title"
                       value="${product.Name}"/>
            <attribute name="Specification-Version"
                       value="${product.version.major}.${product.version.minor}"/>
            <attribute name="Specification-Vendor"
                       value="${spec.vendor}"/>
            <attribute name="Implementation-Title"
                       value="${impl.title}"/>
            <attribute name="Implementation-Version"
                       value="${product.Version} built on ${TODAY_US}"/>
            <attribute name="Implementation-Vendor"
                       value="${nps}, ${cs.dept}"/>
            <attribute name="Implementation-URL"
                       value="${sumo.url}"/>
            <attribute name="Implementation-Vendor-Id"
                       value="${impl.vendor.id}"/>
            <attribute name="Main-Class"
                       value="${main.class}"/>
        </manifest>
        <war destfile="${dist.war}"
             webxml="${web.dir}/web.xml"
             manifest="${manifest.mf}">
            <metainf file="LICENSE"/>
            <zipfileset dir="${web.dir}/jsp"/>
            <zipfileset file="${web.dir}/simple.css"/>
            <zipfileset dir="${web.dir}/pixmaps" prefix="pixmaps"/>
            <lib dir="${basedir}/lib">
                <exclude name="junit*"/>
                <exclude name="hamcrest*"/>
            </lib>
            <classes dir="${build.classes.dir}"/>
        </war>
        <jar destfile="${build.home}/${app.name}.jar"
             manifest="${manifest.mf}">
            <metainf file="LICENSE"/>
            <fileset dir="${build.classes.dir}"/>
        </jar>
    </target>

    <!--
    ==========
    UNIT TESTS <- These are only meant to be run within the CI environment
    ==========
    -->

    <target name="test.unit" depends="compile.test" description="Runs the UnitTestSuite">
        <junit printsummary="yes"
               errorProperty="test.failed"
               failureproperty="test.failed"
               haltonfailure="yes"
               showoutput="yes"
               fork="yes">
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="run.test.classpath"/>
            </classpath>
            <test name="${unit.test.suite}" haltonfailure="no" todir="${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
        <fail message="${unit.test.suite} failed!" if="test.failed"/>
        <antcall target="junit.report"/>
    </target>
    <target name="test.integration" depends="compile.test" description="Runs the IntegrationTestSuite">
        <junit printsummary="yes"
               errorProperty="test.failed"
               failureproperty="test.failed"
               haltonfailure="yes"
               showoutput="yes"
               fork="yes">
            <jvmarg line="${run.jvmargs}"/>
            <formatter type="plain" usefile="false"/>
            <classpath>
                <path refid="tcp"/>
            </classpath>
            <test name="${integration.test.suite}" haltonfailure="no" todir="${build.home}/${reports.dir}">
                <formatter type="xml"/>
            </test>
        </junit>
        <fail message="${integration.test.suite} failed!" if="test.failed"/>
        <antcall target="junit.report"/>
    </target>
    <target name="junit.report" >
        <junitreport todir="${reports.dir}">
            <fileset dir="${reports.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${reports.dir}/html"/>
        </junitreport>
        <antcall target="open.junit.report"/>
    </target>
    <target name="open.junit.report">
        <exec executable="sh">
            <arg value="-c"/>
            <arg value="open -u ${report.html}"/>
        </exec>
    </target>

    <!--
    =====
    ADMIN
    =====
    -->

    <!-- target name="all" depends="dist, api_doc" -->
    <target name="all" depends="clean,dist">
        <echo>System date/time is: ${TODAY_US}</echo>
    </target>

    <!-- Works only from the CLI -->
    <target name="clean" description="Delete old build, lib, dist and deployed web aritifacts">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${build.home}"/>  <!-- avoid problems with package name changes by deleting everything -->
            <fileset dir="${dist.dir}"/>
            <!-- Delete the old web code -->
            <fileset dir="${deploy.home}"/>
            <fileset dir="${tomcat.home}/work/Catalina/localhost/${web.app.name}"/>
        </delete>
        <delete includeemptydirs="true" failonerror="false"> <!-- keep local ivy lib up to date -->
            <fileset dir="${basedir}/lib"> <!-- keep ./lib -->
                <include name="*.jar"/>
            </fileset>
        </delete>
        <delete file="${dist.war}"/>
    </target>

    <target name="install" depends="init" description="Installs WordNetMappings and SUMO to ${sigma.home}/KBs">
        <fail message="SIGMA_HOME needs to be set" unless="sigma.home"/>
        <copy todir="${sigma.home}/KBs">
            <fileset dir="${kbs.home}"/>
        </copy>
        <copy todir="${sigma.home}/KBs/WordNetMappings" file="${kbs.home}/Translations/language.txt"/>
        <copy todir="${sigma.home}/KBs/WordNetMappings">
            <fileset dir="${kbs.home}/WordNetMappings"/>
        </copy>

        <!-- copy wordnet -->
        <untar dest="${sigma.install.downloads}" compression="gzip">
            <url url="http://wordnetcode.princeton.edu/3.0/WordNet-3.0.tar.gz"/>
        </untar>
        <copy todir="${sigma.home}/KBs/WordNetMappings">
            <fileset dir="${sigma.install.downloads}/WordNet-3.0/dict"/>
        </copy>
    </target>

    <target name="api_doc" depends="init" description="Build the JavaDocs and place in ${build.javadoc}.">
        <delete dir="${dist.javadoc.dir}"/>
        <mkdir dir="${dist.javadoc.dir}"/>
        <javadoc sourcepath="${src.dir}" destdir="${dist.javadoc.dir}" author="true" version="true" use="true"
                 windowtitle="Sigma API Specification" splitindex="true" packagenames="com.articulate.sigma.*">
            <classpath path="${run.classpath}"/>
            <doctitle>Sigma API Specification</doctitle>
            <header><![CDATA[<b>Sigma API Specification</b>]]></header>
            <group title="Sigma" packages="com.articulate.sigma.*"/>
            <group title="Sigma TPTPWorld" packages="TPTPWorld.*"/>
            <group title="Sigma TPTP Parser" packages="tptp_parser.*"/>
        </javadoc>
    </target>

</project>

