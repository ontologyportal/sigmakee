<project xmlns:ivy="antlib:org.apache.ivy.ant" name="SigmaKEE" default="all" basedir=".">

    <!--
    ========
    TASKDEFs
    ========
    -->

    <import file="nbproject/ide-targets.xml"/>
    <import file="${catalina.base}/bin/catalina-tasks.xml"/>

    <!--
    ============
    BUILD / DIST
    ============
    -->

    <target name="check.for.ivy.jar">
        <available file="${ivy.jar.file}" property="ivy.present"/>
    </target>

    <target name="download-ivy" depends="check.for.ivy.jar" unless="ivy.present">
        <mkdir dir="${ivy.jar.dir}"/>
        <!-- download Ivy from web site so that it can be used even without any special installation -->
        <get src="https://repo1.maven.org/maven2/org/apache/ivy/ivy/${ivy.install.version}/ivy-${ivy.install.version}.jar"
             dest="${ivy.jar.file}" usetimestamp="true"/>
    </target>

    <target name="init-ivy" depends="download-ivy">
        <!-- try to load Ivy here from Ivy home, in case the user has not already dropped
             it into Ant's lib dir (note that the latter copy will always take precedence).
             We will not fail as long as local lib dir exists (it may be empty) and
             Ivy is in at least one of Ant's lib dir or the local lib dir. -->
        <path id="ivy.lib.path">
            <fileset dir="${ivy.jar.dir}" includes="*.jar"/>
        </path>
        <taskdef resource="org/apache/ivy/ant/antlib.xml"
                 uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
        <ivy:retrieve/>
    </target>

    <path id="core.sourcepath">
        <pathelement path="${src.dir}/com/articulate/sigma"/>
        <pathelement path="${src.dir}/com/articulate/delphi"/>
    </path>
    <path id="test.sourcepath">
        <pathelement path="${test.corpus.dir}/com/articulate/sigma"/>
        <pathelement path="${test.unit.dir}/com/articulate/sigma"/>
        <pathelement path="${test.integration.dir}/com/articulate/sigma"/>
    </path>

    <target name="init" depends="init-ivy">
        <echo message="${app.name} v${product.Version}"/>
        <echo message="CATALINA_HOME is set to: ${catalina.home}"/>
        <echo message="SIGMA_HOME is set to: ${sigma.home}"/>
        <echo message="SIGMA_SRC is set to: ${basedir}"/>
        <echo message="KBs_HOME is set to: ${kbs.home}"/>
        <echo>Java Version via Ant: ${ant.java.version}</echo>
        <echo>Java Version System Prop: ${java.version}</echo>
        <echo message="Git dir: ${workspace}"/>
        <echo>classpath: ${run.classpath}</echo>
        <echo>basedir: ${basedir}</echo>

        <tstamp>
            <format property="TODAY_US" pattern="EEE, d MMM yyyy HHmm Z" locale="en,US"/>
        </tstamp>
    </target>

    <target name="prepare" depends="init" description="deploy code to sigma.war">
        <mkdir dir="${build.classes.dir}"/>

        <!-- Copy all the *.jsp, *.xsl, *.html, pixmaps, etc. -->
        <copy todir="${build.home}" overwrite="yes">
            <fileset dir="${web.dir}/jsp"/>
            <fileset file="${web.dir}/simple.css"/>
        </copy>
        <copy todir="${build.home}/pixmaps">
            <fileset dir="${web.dir}/pixmaps"/>
        </copy>
    </target>

    <target name="TPTP" depends="prepare">
        <echo message="SIGMA_HOME is set to: ${sigma.home}"/>
        <echo message="TPTP is set to: ${tptp.home}"/>
        <!-- TPTP already builds SigmaUtils -->
        <ant antfile="${tptp.home}/build.xml" inheritAll="false" target="all"/>
        <copy todir="${lib.dir}" file="${tptp.home}/tptp.jar"/>
        <copy todir="${lib.dir}" file="${sigma.utils.home}/sigmaUtils.jar"/>
        <!-- Create WEB-INF/lib/ and copy over the needed jar files. -->
        <copy todir="${build.home}/WEB-INF/lib" flatten="true">
            <path path="${javac.classpath}"/>
        </copy>
    </target>

    <target name="compile" depends="TPTP" description="Compile the project and place in ${build.classes}.">
        <javac destdir="${build.classes.dir}"
               debug="on"
               optimize="on"
               deprecation="on"
               includeantruntime="false"
               classpath="${javac.classpath}"
               release="${javac.release}">
            <src refid="core.sourcepath"/>
        </javac>
    </target>

    <target name="dist" depends="compile" description="Create the *.war file and place in ${build.home}.">
        <manifest file="MANIFEST.MF">
            <attribute name="Built-By" value="${my.name} ${my.email}"/>
            <attribute name="Specification-Title"
                       value="${product.Name}"/>
            <attribute name="Specification-Version"
                       value="${product.version.major}.${product.version.minor}"/>
            <attribute name="Specification-Vendor"
                       value="${spec.vendor}"/>
            <attribute name="Implementation-Title"
                       value="${ant.project.name}"/>
            <attribute name="Implementation-Version"
                       value="${product.Version} built on ${TODAY_US}"/>
            <attribute name="Implementation-Vendor"
                       value="${nps}, ${moves.institute}, ${savage.research.group}"/>
            <attribute name="Implementation-URL"
                       value="${savage.url}"/>
        </manifest>
        <jar destfile="${dist.jar}"
             basedir="${build.classes.dir}"
             manifest="MANIFEST.MF">
            <metainf file="LICENSE"/>
        </jar>
        <war destfile="${dist.dir}/${web.app.name}.war"
             basedir="${build.home}"
             webxml="${web.dir}/web.xml"
             manifest="MANIFEST.MF">
            <metainf file="LICENSE"/>
        </war>
        <copy todir="${build.home}" file="${dist.jar}"/> <!-- For SUMOjEdit -->
    </target>

    <!--
    =================
    DEPLOY / UNDEPLOY
    =================
    -->

    <target name="stop" description="stop web application in tomcat">
<!--        <stop url="${mgr.url}"
              username="${username}"
              password="${password}"
              path="${context}"/>-->
        <exec executable="${catalina.home}/bin/${shutdown}">
            <env key="CATALINA_HOME" value="${catalina.home}"/>
        </exec>
    </target>

    <target name="start" description="start web application in tomcat">
<!--        <start url="${mgr.url}"
               username="${username}"
               password="${password}"
               path="${context}"/>-->
        <exec executable="sh">
            <env key="SIGMA_HOME" value="${sigma.home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <env key="CATALINA_OPS" value="${catalina.ops}"/>
            <env key="CATALINA_HOME" value="${catalina.home}"/>
            <arg value="-c"/>
            <arg value="'${catalina.home}/bin/${startup}'"/>
        </exec>
    </target>

    <target name="deploy"
            depends="undeploy,all"
            description="Builds the web application, starts a local Tomcat server and runs sigmakee">
        <sequential>
            <antcall target="start"/>
            <sleep seconds="2"/>
            <deploy url="${mgr.url}"
                    username="${username}"
                    password="${password}"
                    path="${context}"
                    war="${basedir}/${dist.dir}/${web.app.name}.war"/>
            <sleep seconds="2"/>
            <antcall target="open.sigmakee.url"/>
        </sequential>
    </target>

    <target name="open.sigmakee.url">
        <exec executable="sh">
            <arg value="-c"/>
            <arg value="open -u ${deploy.url}"/>
        </exec>
    </target>

    <target name="undeploy"
            description="Removes the web application and stops the local Tomcat server">
        <sequential>
            <undeploy url="${mgr.url}"
                      username="${username}"
                      password="${password}"
                      path="${context}"/>
            <sleep seconds="2"/>
            <antcall target="stop"/>
        </sequential>
    </target>

    <!-- target name="all" depends="dist, api_doc" -->
    <target name="all" depends="clean,dist">
        <echo>System date/time is: ${TODAY_US}</echo>
    </target>

    <!--
    ==========
    RUN / TEST
    ==========
    -->

    <target name="run" depends="compile" description="Performs a test run of SigmaKEE">
        <java classname="com.articulate.sigma.KB"
              classpath="${run.classpath}"
              fork="true">
            <jvmarg value="-Xmx10g"/>
            <env key="SIGMA_HOME" value="${sigma.home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <arg line="-c Object Transaction"/>
        </java>
    </target>

    <target name="compile.test" depends="compile" description="Compile the project's test classes.">
        <mkdir dir="${build.test.classes.dir}"/>
        <javac destdir="${build.test.classes.dir}"
               debug="on"
               optimize="on"
               deprecation="on"
               includeantruntime="false"
               classpath="${javac.test.classpath}"
               release="${javac.release}">
            <src refid="test.sourcepath"/>
        </javac>
    </target>

    <target name="test.single" depends="compile.test" description="Runs a single test method">
        <java classname="com.articulate.sigma.SingleJUnitTestRunner"
              classpath="${run.test.classpath}"
              fork="true">
            <jvmarg value="-Xmx4g"/>
            <env key="SIGMA_HOME" value="${sigma.home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <arg value="com.articulate.sigma.trans.TPTP3ProofProcTest#testGetPrologArgs4"/>
        </java>
    </target>

    <target name="test" depends="compile.test" description="Runs a unit test suite for all of SigmaKEE">
        <java classname="org.junit.runner.JUnitCore"
              classpath="${run.test.classpath}"
              fork="true">
            <jvmarg value="-Xmx8g"/>
            <env key="SIGMA_HOME" value="${sigma.home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <arg value="com.articulate.sigma.UnitTestSuite"/>
        </java>
    </target>

    <!--
    =====
    ADMIN
    =====
    -->

    <target name="clean" description="Delete old build, dist and web directories">
        <delete includeemptydirs="true" failonerror="false">
            <fileset dir="${build.home}"/>  <!-- avoid problems with package name changes by deleting everything -->
            <fileset dir="${dist.dir}"/>
            <!-- Delete the old web code -->
            <fileset dir="${deploy.home}"/>
            <fileset dir="${catalina.home}/work/Catalina/localhost/${web.app.name}"/>
        </delete>
        <delete file="${dist.war}"/>
        <delete file="${test.result.xml}"/>
    </target>

    <target name="install" depends="init">
        <fail message="SIGMA_HOME needs to be set" unless="sigma.home"/>
        <copy todir="${sigma.home}/KBs">
            <fileset dir="${kbs.home}"/>
        </copy>
        <copy todir="${sigma.home}/KBs/WordNetMappings" file="${kbs.home}/Translations/language.txt"/>
        <copy todir="${sigma.home}/KBs/WordNetMappings">
            <fileset dir="${kbs.home}/WordNetMappings"/>
        </copy>

        <!-- copy wordnet -->
        <untar dest="${sigma.install.downloads}" compression="gzip">
            <url url="http://wordnetcode.princeton.edu/3.0/WordNet-3.0.tar.gz"/>
        </untar>
        <copy todir="${sigma.home}/KBs/WordNetMappings">
            <fileset dir="${sigma.install.downloads}/WordNet-3.0/dict"/>
        </copy>
    </target>

    <target name="api_doc" depends="init" description="Build the JavaDocs and place in ${build.javadoc}.">
        <delete dir="${dist.javadoc.dir}"/>
        <mkdir dir="${dist.javadoc.dir}"/>
        <javadoc sourcepath="${src.dir}" destdir="${dist.javadoc.dir}" author="true" version="true" use="true"
                 windowtitle="Sigma API Specification" splitindex="true" packagenames="com.articulate.sigma.*">
            <classpath path="${run.classpath}"/>
            <doctitle>Sigma API Specification</doctitle>
            <header><![CDATA[<b>Sigma API Specification</b>]]></header>
            <group title="Sigma" packages="com.articulate.sigma.*"/>
            <group title="Sigma TPTPWorld" packages="TPTPWorld.*"/>
            <group title="Sigma TPTP Parser" packages="tptp_parser.*"/>
        </javadoc>
    </target>

    <target name="password.servcice" depends="compile" description="Performs account management services">
        <java classname="com.articulate.sigma.PasswordService"
              classpath="${run.classpath}"
              fork="true">
            <jvmarg value="-Xmx5g"/>
            <env key="SIGMA_HOME" value="${sigma.home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <arg line="${pword.props}"/>
        </java>
    </target>

    <target name="debug.password.servcice" depends="compile">
        <nbjpdastart addressproperty="jpda.address" name="SigmaKEE" transport="${debug.transport}">
            <classpath path="${run.classpath}"/>
        </nbjpdastart>
        <java classname="com.articulate.sigma.PasswordService"
              classpath="${run.classpath}"
              fork="true">
            <jvmarg value="-agentlib:jdwp=transport=${debug.transport},address=${jpda.address}"/>
            <jvmarg value="-Xmx5g"/>
            <env key="SIGMA_HOME" value="${sigma.home}"/>
            <env key="ONTOLOGYPORTAL_GIT" value="${ontologyportal.git}"/>
            <env key="SIGMA_SRC" value="${basedir}"/>
            <arg line="${pword.props}"/>
        </java>
    </target>

</project>

